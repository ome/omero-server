plugins {
    id "java-library"
    id "org.openmicroscopy.project" version "5.5.4"
    id "org.openmicroscopy.gradle.ice-builder.slice" version "1.5.0"
}

group = "org.openmicroscopy"
version = "5.6.11-SNAPSHOT"

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

ext {
    //the database type: must match the version set in omero-model
    databaseType = "psql"
    generatedDir = "build/${databaseType}"
}

dependencies {
    testImplementation("org.testng:testng:7.5")
    testImplementation("jmock:jmock:1.+")
    testImplementation('org.openmicroscopy:omero-common-test:5.6.4')

    api('org.openmicroscopy:omero-renderer:5.5.15')

    // Spring framework stuff
    implementation("org.springframework:spring-context-support:4.3.14.RELEASE")
    implementation("org.springframework:spring-jms:4.3.14.RELEASE")
    implementation("org.springframework.security:spring-security-ldap:4.2.4.RELEASE")

    if (databaseType.equals("psql")) {
        // Postgres connect driver for java
        implementation 'org.postgresql:postgresql:42.2.29'
    }
    // Used by hibernate, see: https://stackoverflow.com/a/14365438
    implementation("org.javassist:javassist:3.25.0-GA")

    // API monitoring thing: http://jamonapi.sourceforge.net
    implementation("com.jamonapi:jamon:2.81")

    implementation("com.github.marcus-nl.btm:btm:3.0.0-mk1")

    implementation("org.apache.calcite:calcite-core:1.20.0")
    implementation("org.apache.commons:commons-collections4:4.1")
    implementation("org.apache.pdfbox:pdfbox:2.0.8")
    implementation("org.apache.xmlgraphics:batik-all:1.9.1")

    implementation("commons-beanutils:commons-beanutils:1.9.3")

    implementation("com.sun.mail:javax.mail:1.6.2")

    implementation("com.mortennobel:java-image-scaling:0.8.6")

    implementation("org.quartz-scheduler:quartz:2.2.1")

    implementation("org.subethamail:subethasmtp:3.1.7") {
        exclude group: 'javax.mail'
    }

    implementation("net.sf.ehcache:ehcache:2.10.4")

    implementation("commons-io:commons-io:2.6")
}


test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    // enable TestNG support (default is JUnit)
    useTestNG() {
        suites "src/test/resources/unit.testng.xml"
    }
    dependsOn cleanTest
}

if (slice.iceVersion.contains("3.7")) {
    dependencies {
        api "com.zeroc:ice:3.7.2"
    }
    sourceSets.main.java {
        srcDirs "src/main/ice37", "$generatedDir/ice37"
    }
    slice.output = file("$generatedDir/ice37")
} else if (slice.iceVersion.contains("3.6")) {
    dependencies {
        api "com.zeroc:ice:3.6.5"
    }
    sourceSets.main.java {
        srcDirs "src/main/ice36", "$generatedDir/ice36"
    }
    slice.output = file("$generatedDir/ice36")
}

jar {
    manifest {
        attributes("Main-Class": 'ome.services.fulltext.Main')
    }
}

processResources {
    with copySpec {
        from 'src/main/resources'
        // Set version
        filter { String line ->
            line.startsWith('omero.version') ? 'omero.version='+version : line
        }
    }
}
